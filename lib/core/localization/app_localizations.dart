import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:intl/intl.dart';

/// Application localizations
/// 
/// Generated from .arb files using flutter gen-l10n
/// Access via: AppLocalizations.of(context).keyName
class AppLocalizations {
  AppLocalizations(this.locale);

  final Locale locale;

  static AppLocalizations? of(BuildContext context) {
    return Localizations.of<AppLocalizations>(context, AppLocalizations);
  }

  static const LocalizationsDelegate<AppLocalizations> delegate =
      _AppLocalizationsDelegate();

  // Placeholder methods - will be generated by flutter gen-l10n
  String get appTitle => Intl.message('لوحة إدارة متجر البقالة', name: 'appTitle');
  String get login => Intl.message('تسجيل الدخول', name: 'login');
  String get logout => Intl.message('تسجيل الخروج', name: 'logout');
  String get email => Intl.message('البريد الإلكتروني', name: 'email');
  String get password => Intl.message('كلمة المرور', name: 'password');
  String get dashboard => Intl.message('لوحة التحكم', name: 'dashboard');
  String get products => Intl.message('المنتجات', name: 'products');
  String get categories => Intl.message('الفئات', name: 'categories');
  String get redemptions => Intl.message('الاستبدالات', name: 'redemptions');
  String get users => Intl.message('المستخدمون', name: 'users');
  String get notifications => Intl.message('الإشعارات', name: 'notifications');
  String get save => Intl.message('حفظ', name: 'save');
  String get cancel => Intl.message('إلغاء', name: 'cancel');
  String get delete => Intl.message('حذف', name: 'delete');
  String get edit => Intl.message('تعديل', name: 'edit');
  String get add => Intl.message('إضافة', name: 'add');
  String get loading => Intl.message('جاري التحميل...', name: 'loading');
  String get error => Intl.message('خطأ', name: 'error');
  String get success => Intl.message('نجاح', name: 'success');
  String get noData => Intl.message('لا توجد بيانات', name: 'noData');
}

class _AppLocalizationsDelegate
    extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  bool isSupported(Locale locale) {
    return ['ar', 'en'].contains(locale.languageCode);
  }

  @override
  Future<AppLocalizations> load(Locale locale) async {
    return AppLocalizations(locale);
  }

  @override
  bool shouldReload(_AppLocalizationsDelegate old) => false;
}

